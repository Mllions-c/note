
Workspace：工作区
Index / Stage：暂存区
Repository：仓库区（或本地仓库）
Remote：远程仓库
一、新建代码库

# 在当前目录新建一个Git代码库
$ git init

# 新建一个目录，将其初始化为Git代码库
$ git init [project-name]

# 下载一个项目和它的整个代码历史
$ git clone [url]
二、配置
Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。

# 显示当前的Git配置
$ git config --list

# 编辑Git配置文件
$ git config -e [--global]

# 设置提交代码时的用户信息
$ git config [--global] user.name "[name]"
$ git config [--global] user.email "[email address]"
三、增加/删除文件

# 添加指定文件到暂存区
$ git add [file1] [file2] ...

# 添加指定目录到暂存区，包括子目录
$ git add [dir]

# 添加当前目录的所有文件到暂存区
$ git add .

# 添加每个变化前，都会要求确认
# 对于同一个文件的多处变化，可以实现分次提交
$ git add -p

# 删除工作区文件，并且将这次删除放入暂存区
$ git rm [file1] [file2] ...

# 停止追踪指定文件，但该文件会保留在工作区
$ git rm --cached [file]

# 改名文件，并且将这个改名放入暂存区
$ git mv [file-original] [file-renamed]
四、代码提交

# 提交暂存区到仓库区
$ git commit -m [message]

# 提交暂存区的指定文件到仓库区
$ git commit [file1] [file2] ... -m [message]

# 提交工作区自上次commit之后的变化，直接到仓库区
$ git commit -a

# 提交时显示所有diff信息
$ git commit -v

# 使用一次新的commit，替代上一次提交
# 如果代码没有任何新变化，则用来改写上一次commit的提交信息
$ git commit --amend -m [message]

# 重做上一次commit，并包括指定文件的新变化
$ git commit --amend [file1] [file2] ...
五、分支

# 列出所有本地分支
$ git branch

# 列出所有远程分支
$ git branch -r

# 列出所有本地分支和远程分支
$ git branch -a

# 新建一个分支，但依然停留在当前分支
$ git branch [branch-name]

# 新建一个分支，并切换到该分支
$ git checkout -b [branch]

# 新建一个分支，指向指定commit
$ git branch [branch] [commit]

# 新建一个分支，与指定的远程分支建立追踪关系
$ git branch --track [branch] [remote-branch]

# 切换到指定分支，并更新工作区
$ git checkout [branch-name]

# 切换到上一个分支
$ git checkout -

# 建立追踪关系，在现有分支与指定的远程分支之间
$ git branch --set-upstream [branch] [remote-branch]

# 合并指定分支到当前分支
$ git merge [branch]

# 选择一个commit，合并进当前分支
$ git cherry-pick [commit]

# 删除分支
$ git branch -d [branch-name]

# 删除远程分支
$ git push origin --delete [branch-name]
$ git branch -dr [remote/branch]
六、标签

# 列出所有tag
$ git tag

# 新建一个tag在当前commit
$ git tag [tag]

# 新建一个tag在指定commit
$ git tag [tag] [commit]

# 删除本地tag
$ git tag -d [tag]

# 删除远程tag
$ git push origin :refs/tags/[tagName]

# 查看tag信息
$ git show [tag]

# 提交指定tag
$ git push [remote] [tag]

# 提交所有tag
$ git push [remote] --tags

# 新建一个分支，指向某个tag
$ git checkout -b [branch] [tag]
七、查看信息

# 显示有变更的文件
$ git status

# 显示当前分支的版本历史
$ git log

# 显示commit历史，以及每次commit发生变更的文件
$ git log --stat

# 搜索提交历史，根据关键词
$ git log -S [keyword]

# 显示某个commit之后的所有变动，每个commit占据一行
$ git log [tag] HEAD --pretty=format:%s

# 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件
$ git log [tag] HEAD --grep feature

# 显示某个文件的版本历史，包括文件改名
$ git log --follow [file]
$ git whatchanged [file]

# 显示指定文件相关的每一次diff
$ git log -p [file]

# 显示过去5次提交
$ git log -5 --pretty --oneline

# 显示所有提交过的用户，按提交次数排序
$ git shortlog -sn

# 显示指定文件是什么人在什么时间修改过
$ git blame [file]

# 显示暂存区和工作区的差异
$ git diff

# 显示暂存区和上一个commit的差异
$ git diff --cached [file]

# 显示工作区与当前分支最新commit之间的差异
$ git diff HEAD

# 显示两次提交之间的差异
$ git diff [first-branch]...[second-branch]

# 显示今天你写了多少行代码
$ git diff --shortstat "@{0 day ago}"

# 显示某次提交的元数据和内容变化
$ git show [commit]

# 显示某次提交发生变化的文件
$ git show --name-only [commit]

# 显示某次提交时，某个文件的内容
$ git show [commit]:[filename]

# 显示当前分支的最近几次提交
$ git reflog
八、远程同步

# 下载远程仓库的所有变动
$ git fetch [remote]

# 显示所有远程仓库
$ git remote -v

# 显示某个远程仓库的信息
$ git remote show [remote]

# 增加一个新的远程仓库，并命名
$ git remote add [shortname] [url]

# 取回远程仓库的变化，并与本地分支合并
$ git pull [remote] [branch]

# 上传本地指定分支到远程仓库
$ git push [remote] [branch]

# 强行推送当前分支到远程仓库，即使有冲突
$ git push [remote] --force

# 推送所有分支到远程仓库
$ git push [remote] --all
九、撤销

# 恢复暂存区的指定文件到工作区
$ git checkout [file]

# 恢复某个commit的指定文件到暂存区和工作区
$ git checkout [commit] [file]

# 恢复暂存区的所有文件到工作区
$ git checkout .

# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变
$ git reset [file]

# 重置暂存区与工作区，与上一次commit保持一致
$ git reset --hard

# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变
$ git reset [commit]

# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致
$ git reset --hard [commit]

# 重置当前HEAD为指定commit，但保持暂存区和工作区不变
$ git reset --keep [commit]

# 新建一个commit，用来撤销指定commit
# 后者的所有变化都将被前者抵消，并且应用到当前分支
$ git revert [commit]

# 暂时将未提交的变化移除，稍后再移入
$ git stash
$ git stash pop
十、其他

# 生成一个可供发布的压缩包
$ git archive

git 使用
显示npm安装进程
npm config set loglevel=http
1.添加到暂存区：git add 文件名
1.1将全部文件添加到暂存区：git add -A
2.查看状态：git status 
2.1查看精简版状态：git status -s
3.提交到本地仓库：git commit -m "更新的说明"
4.放弃本地修改，没add的之前：git checkout -- 文件名
4.1 放弃所有修改 git checkout —- .	
4.2 回退到某个版本 git reset —-hard 版本号
5.将本地仓库推送到git在线仓库
5.1关联 git remote add origin 在线仓库路径
5.2推送 git push -u origin master
如果提交被拒绝，需要先跟远程同步，git pull origin master

将远程分支覆盖本地
git reset --hard origin/分支名

git里命令

1.1获取包括隐藏的文件信息：ls -al
2.当前目录：pwd
3.创建文件git_1.html，内容为1： echo 1 > git_1.html
3.1在git_1.html后面加2：echo 2 >> git_1.html
4.创建分枝：git branch 分枝名
4.1切换指针到分枝：git checkout 分枝名
4.2创建加切分枝:git checkout -b 分枝名
4.3查看分枝数：git branch
4.4删除分支 git branch -d 分支名
4.5合并分支，先切换到主分支， git merge 主分支名 被合并分支名

1.获取文件信息：ls
5.创建新文件：touch 文件名
6.删除文件包括子文件：rm -rf 文件名
7.创建新文件夹：mkdir 文件名
9.查看文件内容：cat 文件名

帮看具体命令帮助信息
10.git 具体命令 —help

8.查看commit的版本号，存于.git文件中的：git log
8.0 查看对应版本好的操作详情 git show 版本号，
8.1标记commit版本号 $ git tag 1.0.0 1b2e1d63ff, 1b2e1d63ff 是你想要标记的提交 ID 的前 10 位字符。
8.1.打印精简提交日志：git log --oneline --graph
8.2 图形设置 git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
10.查看工作区和暂存区文件差别：git diff
11.直接添加到本地git仓库：git commit -a -m"备注信息"
12.输出历史记录：history
13.合并分枝：将master指针指向要合并的分枝
13.1合并分枝方法2：git merge 分枝名
13.2放弃合并：git merge --abort
14.删除分枝：git branch -d 分枝名
15.当合并分枝冲突时，先在文件里删除冲突指针，然后添加合并
16.合并时不丢掉分枝信息:git merge --no-ff -m"备注信息"

工作台操作
17.工作区暂存区保存到工作台：git stash
17.工作台清单：git stash list
17.1恢复工作区git stash apply 工作台名	
17.2 git stash drop
17.3 git stash pop
17.2 git stash pop
18.当前最新版本覆盖工作区、暂存区git reset --hard HEAD使用gitbach来访问服务器：curl http://localhost:8888使用gitbach来访问服务器：curl http://localhost:8888

设置密匙
$ ssh-keygen -t rsa -C "millions_02@sina.com"
查看公匙
$ cat ~/.ssh/id_rsa.pub
打开公式，限mac
$ open ~/.ssh
将公匙粘贴到github钥匙管理上

git 成套
一本地推动推送远程
1、首先初始化$ git init
2、把代码提交到本地仓库，因为要生成分支，后面要与远程仓库的分支关联（必须）：$ git add .

$ git commit -m “说明”
3与远程仓库关联：$ git remote add origin https://git.coding.net/ZENG_KE/Test.git
4、此时可以查看远程仓库地址：
5把本地分支与远程分支关联
$ git remote -v
$ git pull（如果报错加$ git pull origin master –allow-unrelated-histories）
$ git branch –set-upstream-to=origin/master master
7、最后我们要把本地仓库的代码push到远程仓库去：$ git push origin master

二本地推动推送远程
已有远程仓库，通过远程仓库去clone到本地，生成本地仓库：
1.$ git clone https://git.coding.net/ZENG_KE/Me.git

babel命令
查看版本babel -V
帮助babel --help
babel index.js --out-file a.js 将index的文件编译到a文件
babel index.js --o a.js 缩写

将src文件内的文件编译到build文件babel src --out-dir build

在packjson里配置 "build":"./node_modules/.bin/babel src --put-dir build"

简写"build":"./node_modules/.bin/babel src -d build"
持续监听"build":"./node_modules/.bin/babel src -wd build"

安装预设npm install babel-preset-es2015 --save-dev

配置预设
1.创建touch .babelrc
2.配置写入.babelrc
{
	"presets":["es2015"]
}
3.配置可查官网 usage里的 options
4.下载react预设npm install babel-preset-react --save-dev
5.下载react npm install react react-dom --save
6.添加react预设
{
	"presets":["es2015","react"]
}
二、插件安装，都需要配置
7.安装umd插件（使代码符合umd规范）
npm install --save-dev babel-plugin-transform-es2015-modules-umd
8.安装runtime插件（代码整理）npm install babel-runtime babel-plugin-transform-runtime --save-dev
9. npm install babel-preset-stage-0 --save-dev
10.npm install babel-polyfill --save
11.npm install gulp gulp-babel --save-dev
12.npm install redux --save
13.（不推荐）npm install babel-preset-es2015-loose --save-dev

14.快捷初始化npm init -y

三、安装webpack
npm install webpack --save-dev
npm install webpack-dev-server --save-dev
npm install react react-dom --save

npm install babel-loader babel-core babel-preset-es2015 babel-preset-react --save-dev

 npm install css-loader style-loader less-loader sass-loader --save-dev
